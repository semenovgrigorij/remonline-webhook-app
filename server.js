const orderCache = new Map(); // –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
// const crypto = require("crypto");
require("dotenv").config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
// const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "8026606898:AAEcpb8avNsTWe8ehwDVsAF-sKy3WiYKfwg";
// const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || "1316558920";
// const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || "VSBpuxhNp0LJ5hJwiN8FZ";

const WORDPRESS_URL = process.env.WORDPRESS_URL || ''; 
const WORDPRESS_SECRET = process.env.WORDPRESS_SECRET || ''; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ WordPress
let api_token = process.env.REMONLINE_API_TOKEN || '';
let token_expiry = 0;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!WORDPRESS_SECRET) {
  console.warn("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: WORDPRESS_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. API-–∑–∞–ø—Ä–æ—Å—ã –∫ WordPress –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.");
}

if (!process.env.REMONLINE_API_KEY) {
  console.warn("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: REMONLINE_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
}

const AUTO_APPOINTMENT_STATUS_ID = 1642511; // ID —Å—Ç–∞—Ç—É—Å–∞ "–ê–≤—Ç–æ–∑–∞–ø–∏—Å"
const IN_PROGRESS_STATUS_ID = 1342663; // ID —Å—Ç–∞—Ç—É—Å–∞ "–ù–æ–≤—ã–π"
const statusNames = {
  '1642511': '–ê–≤—Ç–æ–∑–∞–ø–∏—Å',
  '1342663': '–ù–æ–≤–∏–π',
  '1342652': '–í—ñ–¥–º–æ–≤–∞'
};


const app = express();

console.log("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API:");
console.log(`  - WORDPRESS_URL: ${WORDPRESS_URL}`);
console.log(`  - API Token: ${api_token ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log(`  - API Key: ${process.env.REMONLINE_API_KEY ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log(`  - Webhook Secret: ${WORDPRESS_SECRET ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω Remonline API —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á API
 * @returns {string|null} –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function updateRemonlineToken() {
  try {
    const api_key = process.env.REMONLINE_API_KEY;
    if (!api_key) {
      console.error("‚ùå API –∫–ª—é—á Remonline –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
      return null;
    }

    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Remonline —á–µ—Ä–µ–∑ API");

    const response = await axios.post("https://api.remonline.app/token/new", {
      api_key: api_key
    }, {
      headers: {
        'accept': 'application/json',
        'content-type': 'application/json'
      },
      timeout: 10000
    });

    if (response.status === 200 && response.data && response.data.token) {
      const newToken = response.data.token;
      console.log(`‚úÖ –¢–æ–∫–µ–Ω Remonline —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (${newToken.substring(0, 5)}...)`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      api_token = newToken;
      token_expiry = Math.floor(Date.now() / 1000) + 24*3600;
      
      return newToken;
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞");
      return null;
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error.message);
    if (error.response) {
      console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}, –î–∞–Ω–Ω—ã–µ:`, error.response.data);
    }
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω Remonline –∏–∑ WordPress
 */
async function getTokenFromWordPress() {
  try {
    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ WordPress");
    
    const response = await axios.get(`${WORDPRESS_URL}/wp-json/amelia-remonline/v1/get-token`, {
      params: {
        secret: WORDPRESS_SECRET
      },
      timeout: 10000
    });
    
    if (response.status === 200 && response.data && response.data.token) {
      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω Remonline –∏–∑ WordPress");
      return response.data.token;
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞");
      return null;
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ WordPress:", error.message);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω Remonline
 * @returns {string|null} API —Ç–æ–∫–µ–Ω –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function getApiToken() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    const now = Math.floor(Date.now() / 1000);
    if (api_token && token_expiry > now + 300) { // –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ –º–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
      console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω Remonline (${api_token.substring(0, 5)}...)`);
      return api_token;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ WordPress
    console.log(`üîÑ –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ WordPress`);
    
    try {
      const response = await axios.get(`${WORDPRESS_URL}/wp-json/amelia-remonline/v1/get-token`, {
        params: {
          secret: WORDPRESS_SECRET
        },
        timeout: 10000
      });
      
      if (response.status === 200 && response.data && response.data.token) {
        api_token = response.data.token;
        token_expiry = response.data.expires || (now + 24*3600);
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∏–∑ WordPress (${api_token.substring(0, 5)}...), –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ ${new Date(token_expiry * 1000).toLocaleString()}`);
        return api_token;
      }
    } catch (wpError) {
      console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ WordPress:`, wpError.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ WordPress, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    console.log(`üîÑ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Remonline`);
    const newToken = await updateRemonlineToken();
    
    if (newToken) {
      api_token = newToken;
      token_expiry = now + 24*3600; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ 24 —á–∞—Å–∞
      console.log(`‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (${api_token.substring(0, 5)}...), –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ ${new Date(token_expiry * 1000).toLocaleString()}`);
      return api_token;
    }
    
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω Remonline`);
    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ API —Ç–æ–∫–µ–Ω–∞:`, error.message);
    return null;
  }
}


// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∏ x-www-form-urlencoded
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get("/", (req, res) => {
  res.status(200).send("‚úÖ –í–µ–±—Ö—É–∫ –¥–ª—è Remonline —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});


/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Å Amelia
 * @param {string} orderId ID –∑–∞–∫–∞–∑–∞
 * @param {string} newStatusId ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
async function syncStatusWithAmelia(orderId, newStatusId) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!orderId || !newStatusId) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (orderId: ${orderId}, newStatusId: ${newStatusId})`);
      return false;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç—Ä–æ–∫–µ
    const orderIdStr = String(orderId);
    const newStatusIdStr = String(newStatusId);
    
    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ #${orderIdStr} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${newStatusIdStr} (${statusNames[newStatusIdStr] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}) —Å Amelia`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å –≤ Amelia
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ —Å externalId=${orderIdStr} –≤ Amelia`);
      
      const checkUrl = `${WORDPRESS_URL}/wp-json/amelia-remonline/v1/check-appointment`;
      console.log(`URL –∑–∞–ø—Ä–æ—Å–∞: ${checkUrl}?external_id=${orderIdStr}`);
      
      const checkResponse = await axios.get(checkUrl, {
        params: {
          external_id: orderIdStr,
          secret: WORDPRESS_SECRET
        },
        timeout: 15000
      });
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏: ${JSON.stringify(checkResponse.data)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
      if (!checkResponse.data || typeof checkResponse.data.exists !== 'boolean') {
        console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏:`, checkResponse.data);
        return false;
      }
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (!checkResponse.data.exists) {
        console.log(`‚ö†Ô∏è –ó–∞–ø–∏—Å—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderIdStr} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Amelia. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.`);
        return false;
      }
      
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderIdStr} –Ω–∞–π–¥–µ–Ω–∞ –≤ Amelia`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏ –≤ Amelia:`, error.message);
      if (error.response) {
        console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}, –î–∞–Ω–Ω—ã–µ:`, error.response.data);
      }
      return false;
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderIdStr} –≤ Amelia`);
      
      const updateUrl = `${WORDPRESS_URL}/wp-json/amelia-remonline/v1/update-status`;
      console.log(`URL –∑–∞–ø—Ä–æ—Å–∞: ${updateUrl}`);
      
      const response = await axios.post(updateUrl, {
        orderId: orderIdStr,
        newStatusId: newStatusIdStr,
        secret: WORDPRESS_SECRET
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 15000
      });
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${JSON.stringify(response.data)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
      if (!response.data || response.data.success !== true) {
        console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:`, response.data);
        return false;
      }
      
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Amelia`, response.data);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Amelia:`, error.message);
      if (error.response) {
        console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}, –î–∞–Ω–Ω—ã–µ:`, error.response.data);
      } else if (error.request) {
        console.error(`–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. –ó–∞–ø—Ä–æ—Å:`, error.request);
      }
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:`, error.message);
    if (error.stack) {
      console.error("Stack trace:", error.stack);
    }
    return false;
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ —Å Amelia
 * @param {string} orderId ID –∑–∞–∫–∞–∑–∞
 * @param {number} scheduledFor –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
async function syncDateTimeWithAmelia(orderId, scheduledFor) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!orderId) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏`);
      return false;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if (!scheduledFor || isNaN(Number(scheduledFor))) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (${scheduledFor})`);
      return false;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç—Ä–æ–∫–µ –∏ —á–∏—Å–ª—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
    const orderIdStr = String(orderId);
    const scheduledForNum = Number(scheduledFor);
    
    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞ #${orderIdStr} (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${new Date(scheduledForNum).toLocaleString()}) —Å Amelia`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å –≤ Amelia
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ —Å externalId=${orderIdStr} –≤ Amelia`);
      
      const checkUrl = `${WORDPRESS_URL}/wp-json/amelia-remonline/v1/check-appointment`;
      console.log(`URL –∑–∞–ø—Ä–æ—Å–∞: ${checkUrl}?external_id=${orderIdStr}`);
      
      const checkResponse = await axios.get(checkUrl, {
        params: {
          external_id: orderIdStr,
          secret: WORDPRESS_SECRET
        },
        timeout: 15000
      });
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏: ${JSON.stringify(checkResponse.data)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
      if (!checkResponse.data || typeof checkResponse.data.exists !== 'boolean') {
        console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏:`, checkResponse.data);
        return false;
      }
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (!checkResponse.data.exists) {
        console.log(`‚ö†Ô∏è –ó–∞–ø–∏—Å—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderIdStr} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Amelia. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞.`);
        return false;
      }
      
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderIdStr} –Ω–∞–π–¥–µ–Ω–∞ –≤ Amelia`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏ –≤ Amelia:`, error.message);
      if (error.response) {
        console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}, –î–∞–Ω–Ω—ã–µ:`, error.response.data);
      }
      return false;
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞ #${orderIdStr} –≤ Amelia`);
      
      const updateUrl = `${WORDPRESS_URL}/wp-json/amelia-remonline/v1/update-datetime`;
      console.log(`URL –∑–∞–ø—Ä–æ—Å–∞: ${updateUrl}`);
      
      const response = await axios.post(updateUrl, {
        orderId: orderIdStr,
        scheduledFor: scheduledForNum,
        secret: WORDPRESS_SECRET
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 15000
      });
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: ${JSON.stringify(response.data)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
      if (!response.data || response.data.success !== true) {
        console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:`, response.data);
        return false;
      }
      
      console.log(`‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Amelia`, response.data);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ Amelia:`, error.message);
      if (error.response) {
        console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}, –î–∞–Ω–Ω—ã–µ:`, error.response.data);
      } else if (error.request) {
        console.error(`–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. –ó–∞–ø—Ä–æ—Å:`, error.request);
      }
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:`, error.message);
    if (error.stack) {
      console.error("Stack trace:", error.stack);
    }
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –∏–∑ Remonline API
 * @param {string} orderId ID –∑–∞–∫–∞–∑–∞ –≤ Remonline
 * @param {string} [providedToken=null] API —Ç–æ–∫–µ–Ω Remonline (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {number|null} –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ null
 */
async function getOrderScheduledTime(orderId, providedToken = null) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!orderId) {
      console.error(`‚ùå –ù–µ —É–∫–∞–∑–∞–Ω orderId –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞`);
      return null;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
    const token = providedToken || api_token;
    
    if (!token) {
      console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API —Ç–æ–∫–µ–Ω Remonline`);
      return null;
    }

    console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑ Remonline (—Ç–æ–∫–µ–Ω: ${token.substring(0, 5)}...)`);

    // –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Remonline API
    const response = await axios.get(`https://api.remonline.app/order/${orderId}`, {
      params: {
        token: token
      },
      headers: {
        'Accept': 'application/json'
      },
      timeout: 10000
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (response.status !== 200 || !response.data || !response.data.data) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ #${orderId}: ${response.status}`);
      return null;
    }

    const orderData = response.data.data;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è scheduled_for
    if (!orderData.scheduled_for) {
      console.log(`‚ÑπÔ∏è –£ –∑–∞–∫–∞–∑–∞ #${orderId} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è`);
      return null;
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}: ${orderData.scheduled_for} (${new Date(orderData.scheduled_for).toLocaleString()})`);
    return orderData.scheduled_for;

  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (error.response && error.response.status === 401) {
      console.log("üîÑ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å");
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π —Ç–æ–∫–µ–Ω
      if (!providedToken) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ WordPress –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
        const newToken = await getApiToken();
        if (newToken) {
          return getOrderScheduledTime(orderId, newToken);
        }
      }
    }
    
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ #${orderId}:`, error.message);
    if (error.response) {
      console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}, –î–∞–Ω–Ω—ã–µ:`, error.response.data);
    }
    return null;
  }
}

// –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
const eventHandlers = {
  "Order.Created": async (data) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –∫–µ—à
    orderCache.set(data.metadata.order.id, {
      client: data.metadata.client,
      asset: data.metadata.asset,
      scheduledFor: data.metadata.order.scheduled_for // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    });
    return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  },
  "Order.Status.Changed": async (data) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!data || !data.metadata || !data.metadata.order) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞");
        return "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞*";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
      const orderId = data.metadata.order.id;
      if (!orderId) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–∞–∫–∞–∑–∞", data.metadata.order);
        return "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–∞–∫–∞–∑–∞*";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
      const newStatusId = data.metadata.new && data.metadata.new.id;
      if (!newStatusId) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞", data.metadata.new);
        return "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å*";
      }
      
      const oldStatusId = data.metadata.old && data.metadata.old.id;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const orderIdStr = String(orderId);
      const newStatusIdStr = String(newStatusId);
      const oldStatusIdStr = oldStatusId ? String(oldStatusId) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
      
      console.log(`‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderIdStr}: ${oldStatusIdStr} (${statusNames[oldStatusIdStr] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}) -> ${newStatusIdStr} (${statusNames[newStatusIdStr] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'})`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è API Remonline
      const token = data.metadata.order.token || await getApiToken();
      if (!token) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API —Ç–æ–∫–µ–Ω Remonline");
        return "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: –ø—Ä–æ–±–ª–µ–º–∞ —Å API*";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Remonline API
      let scheduledTime = null;
      try {
        scheduledTime = await getOrderScheduledTime(orderIdStr, token);
        if (scheduledTime) {
          console.log(`üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ #${orderIdStr}: ${new Date(scheduledTime).toLocaleString()}`);
        } else {
          console.log(`‚ÑπÔ∏è –£ –∑–∞–∫–∞–∑–∞ #${orderIdStr} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è`);
        }
      } catch (timeError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞: ${timeError.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Amelia
      let statusMessage = "";
      
      console.log(`üîÑ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ syncStatusWithAmelia –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderIdStr}, —Å—Ç–∞—Ç—É—Å=${newStatusIdStr}`);
      
      try {
        const statusUpdateResult = await syncStatusWithAmelia(orderIdStr, newStatusIdStr);
        
        if (statusUpdateResult) {
          console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderIdStr} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Amelia`);
          
          // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ù–æ–≤–∏–π" (IN_PROGRESS_STATUS_ID) –∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
          if (newStatusIdStr === String(IN_PROGRESS_STATUS_ID) && scheduledTime) {
            console.log(`üîÑ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ syncDateTimeWithAmelia –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderIdStr}, –≤—Ä–µ–º—è=${new Date(scheduledTime).toLocaleString()}`);
            
            try {
              const timeUpdateResult = await syncDateTimeWithAmelia(orderIdStr, scheduledTime);
              
              if (timeUpdateResult) {
                console.log(`‚úÖ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ #${orderIdStr} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Amelia`);
                statusMessage = `üîÑ *–ó–∞–∫–∞–∑ #${orderIdStr} –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–∞–±–æ—Ç—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞ ${new Date(scheduledTime).toLocaleString()}*`;
              } else {
                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ #${orderIdStr} –≤ Amelia`);
                statusMessage = `üîÑ *–ó–∞–∫–∞–∑ #${orderIdStr} –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è*`;
              }
            } catch (timeUpdateError) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: ${timeUpdateError.message}`);
              statusMessage = `üîÑ *–ó–∞–∫–∞–∑ #${orderIdStr} –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–∞–±–æ—Ç—É, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏*`;
            }
          } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            if (newStatusIdStr === String(IN_PROGRESS_STATUS_ID)) {
              statusMessage = `üîÑ *–ó–∞–∫–∞–∑ #${orderIdStr} –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–∞–±–æ—Ç—É*`;
            } else if (newStatusIdStr === String(AUTO_APPOINTMENT_STATUS_ID)) {
              statusMessage = `üîÑ *–ó–∞–∫–∞–∑ #${orderIdStr} –≤ —Å—Ç–∞—Ç—É—Å–µ "–ê–≤—Ç–æ–∑–∞–ø–∏—Å"*`;
            } else {
              statusMessage = `üîÑ *–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderIdStr} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusNames[newStatusIdStr] || newStatusIdStr}"*`;
            }
          }
        } else {
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderIdStr} –≤ Amelia`);
          statusMessage = `‚ö†Ô∏è *–ó–∞–∫–∞–∑ #${orderIdStr}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å Amelia*`;
        }
      } catch (statusUpdateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${statusUpdateError.message}`);
        statusMessage = `‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderIdStr}*`;
      }
      
      return statusMessage;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error.message);
      if (error.stack) {
        console.error("Stack trace:", error.stack);
      }
      return "‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞*";
    }
  },
  "Order.Deleted": (data) => {
    return (
      `üóëÔ∏è *–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${data.metadata.order.id}*\n` +
      `üìù –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: \`${data.metadata.order.name}\`\n` +
      `üë®‚Äçüíº –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫: ${data.employee?.full_name || "–ù–µ–≤—ñ–¥–æ–º–æ"}`
    );
  },
  "Order.ScheduledTime.Changed": async (data) => {
  const orderId = data.metadata.order.id;
  const scheduledFor = data.metadata.new; // –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  
  console.log(`‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞ #${orderId}: ${new Date(scheduledFor).toLocaleString()}`);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Amelia
  await syncDateTimeWithAmelia(orderId, scheduledFor);
  
  return `üïí *–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${new Date(scheduledFor).toLocaleString()}*`;
  },
};

// –í–µ–±—Ö—É–∫ –æ—Ç Remonline
app.post("/webhook", async (req, res) => {
  console.log("‚≠ê WEBHOOK RECEIVED ‚≠ê");
  console.log("Headers:", JSON.stringify(req.headers));
  console.log("Raw webhook data:", JSON.stringify(req.body, null, 2));
  try {
    const xSignature = req.headers['x-signature'] || req.body['x-signature'];
    if (xSignature) {
      console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å: ${xSignature}`);
      
    } else {
      console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –∫–ª—é—á–∞`);
    }

    const data = req.body;
    console.log("üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Remonline:", data.event_name);

    const handler = eventHandlers[data.event_name];
    let message;
    
    if (handler) {
      message = await handler(data);
      
      // –ï—Å–ª–∏ handler –≤–µ—Ä–Ω—É–ª null ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
      if (message === null) {
        console.log("‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram");
        return res.status(200).send("OK (notification skipped)");
      }
    } else {
      message = `üì¶ –°–æ–±—ã—Ç–∏–µ ${data.event_name}:\nID: ${data.id}`;
    }

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    // await sendTelegramMessageWithRetry(message);
    res.status(200).send("OK");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    res.status(200).send("Error handled"); // –û—Ç–≤–µ—á–∞–µ–º 200 OK, —á—Ç–æ–±—ã Remonline –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Order.Status.Changed
app.get("/test-event", async (req, res) => {
  try {
    const orderId = req.query.order_id;
    if (!orderId) {
      return res.status(400).send("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä order_id");
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = await getApiToken();
    if (!token) {
      return res.status(500).send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API —Ç–æ–∫–µ–Ω Remonline");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ #${orderId} –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è`);
    
    // –≠–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è Order.Status.Changed
    const eventData = {
      metadata: {
        order: {
          id: orderId,
          token: token
        },
        new: {
          id: IN_PROGRESS_STATUS_ID  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å "–ù–æ–≤–∏–π"
        },
        old: {
          id: AUTO_APPOINTMENT_STATUS_ID  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –±—ã–ª "–ê–≤—Ç–æ–∑–∞–ø–∏—Å"
        }
      }
    };
    
    console.log(`üîÑ –≠–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏—è Order.Status.Changed –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    try {
      const result = await eventHandlers["Order.Status.Changed"](eventData);
      res.send(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ. –°–æ–æ–±—â–µ–Ω–∏–µ: ${result}`);
    } catch (eventError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è:", eventError);
      res.status(500).send(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: ${eventError.message}`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    res.status(500).send(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
app.get("/test-sync", async (req, res) => {
  const orderId = req.query.order_id || 999;
  const newStatusId = req.query.status_id || IN_PROGRESS_STATUS_ID;
  
  try {
    const result = await syncStatusWithAmelia(orderId, newStatusId);
    if (result) {
      res.send(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    } else {
      res.status(500).send(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ #${orderId}`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).send("–û—à–∏–±–∫–∞: " + error.message);
  }
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
app.get("/test-sync-time", async (req, res) => {
  const orderId = req.query.order_id || 999;
  const scheduledFor = req.query.time || Date.now(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  try {
    const result = await syncDateTimeWithAmelia(orderId, scheduledFor);
    if (result) {
      res.send(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} (${new Date(parseInt(scheduledFor)).toLocaleString()})`);
    } else {
      res.status(500).send(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞ #${orderId}`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:", error);
    res.status(500).send("–û—à–∏–±–∫–∞: " + error.message);
  }
});

app.get("/test-get-order", async (req, res) => {
  try {
    const orderId = req.query.order_id;
    if (!orderId) {
      return res.status(400).send("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä order_id");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await getApiToken();
    if (!token) {
      return res.status(500).send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API —Ç–æ–∫–µ–Ω Remonline");
    }
    
    const scheduledTime = await getOrderScheduledTime(orderId, token);
    
    if (scheduledTime) {
      res.send(`‚úÖ –î–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} –ø–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è: ${new Date(scheduledTime).toLocaleString()}`);
    } else {
      res.status(404).send(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).send("–û—à–∏–±–∫–∞: " + error.message);
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
/* async function sendTelegramMessageWithRetry(text, retries = 3, delay = 2000) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: TELEGRAM_CHAT_ID,
    text,
    parse_mode: "Markdown",
    disable_web_page_preview: true,
  };

  let lastError;

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await axios.post(url, payload, {
        headers: { "Content-Type": "application/json" },
        timeout: 10000, 
      });

      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`);
      return response.data;
    } catch (error) {
      lastError = error;
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}):`,
        {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message,
        }
      );
      if (error.response?.status === 429) {
        const retryAfter = error.response.data?.parameters?.retry_after || 5;
        console.log(`‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–µ–º ${retryAfter} —Å–µ–∫—É–Ω–¥`);
        await new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));
      } else if (error.response?.status === 400) {
        if (error.response.data?.description?.includes("markdown")) {
          console.log("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
          payload.parse_mode = "";
        }
      } else if (attempt < retries) {
        console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫—É–Ω–¥...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
        delay = delay * 1.5;
      }
    }
  }
  throw new Error(
    `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫: ${lastError.message}`
  );
} */

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});






