const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const crypto = require("crypto");
require("dotenv").config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown
function escapeMarkdown(text) {
  if (!text) return text;
  return String(text).replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&');
}

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN =
  process.env.TELEGRAM_BOT_TOKEN ||
  "8026606898:AAEcpb8avNsTWe8ehwDVsAF-sKy3WiYKfwg";
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || "1316558920";
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || "VSBpuxhNp0LJ5hJwiN8FZ";
const AUTO_APPOINTMENT_STATUS_ID = 1642511;

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∏ x-www-form-urlencoded
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
const statusNamesCache = {};
statusNamesCache[AUTO_APPOINTMENT_STATUS_ID] = "–ê–≤—Ç–æ–∑–∞–ø–∏—Å";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get("/", (req, res) => {
  res.status(200).send("‚úÖ –í–µ–±—Ö—É–∫ –¥–ª—è Remonline —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
let lastRequests = [];

app.get("/last-requests", (req, res) => {
  res.json(lastRequests.slice(-5));
});

// –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
const eventHandlers = {
"Order.Created": async (data) => {
    console.log("‚ÑπÔ∏è –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å –µ—â—ë –Ω–µ '–ê–≤—Ç–æ–∑–∞–ø–∏—Å'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
    return null; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
},
"Order.Status.Changed": async (data) => {
    console.log("–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å:", data.metadata.old.id);
    console.log("–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", data.metadata.new.id);
    console.log("Client data:", JSON.stringify(data.metadata.client, null, 2));
    console.log("Asset data:", JSON.stringify(data.metadata.asset, null, 2));
    const newStatusId = data.metadata.new.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å = "–ê–≤—Ç–æ–∑–∞–ø–∏—Å" (ID=1642511)
    if (newStatusId !== AUTO_APPOINTMENT_STATUS_ID) return null;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ "–ê–≤—Ç–æ–∑–∞–ø–∏—Å"
    const orderName = escapeMarkdown(data.metadata.order?.name || "–ë–µ–∑ –Ω–∞–∑–≤–∏");
    const clientName = escapeMarkdown(data.metadata.client?.fullname || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ");
    const assetName = escapeMarkdown(data.metadata.asset?.name?.trim() || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ");
    const employeeName = escapeMarkdown(data.employee?.full_name || "–ù–µ–≤—ñ–¥–æ–º–æ");

    return `üîÑ *–ê–≤—Ç–æ–∑–∞–ø–∏—Å  #${data.metadata.order.id}*\n` +
           `üìù –ù–∞–∑–≤–∞: \`${orderName}\`\n` +
           `üë§ –ö–ª—ñ—î–Ω—Ç: ${clientName}\n` +
           `üì± –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ: ${assetName}\n` +
           `üë®‚Äçüíº –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫: ${employeeName}`;
},
  "Order.Deleted": (data) => {
    return (
      `üóëÔ∏è *–£–¥–∞–ª–µ–Ω –∑–∞–∫–∞–∑ #${data.metadata.order.id}*\n` +
      `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: \`${data.metadata.order.name}\`\n` +
      `üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${data.employee?.full_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`
    );
  },
  "Order.Manager.Changed": (data) => {
    const oldManager = data.metadata.old?.full_name || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";
    const newManager = data.metadata.new?.full_name || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";

    return (
      `üë®‚Äçüíº *–ò–∑–º–µ–Ω–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–∞ #${data.metadata.order.id}*\n` +
      `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: \`${data.metadata.order.name}\`\n` +
      `–ú–µ–Ω–µ–¥–∂–µ—Ä: ${oldManager} ‚û°Ô∏è ${newManager}`
    );
  },
  "Order.Engineer.Changed": (data) => {
    const oldEngineer = data.metadata.old?.full_name || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";
    const newEngineer = data.metadata.new?.full_name || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";

    return (
      `üîß *–ò–∑–º–µ–Ω–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞ #${data.metadata.order.id}*\n` +
      `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: \`${data.metadata.order.name}\`\n` +
      `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${oldEngineer} ‚û°Ô∏è ${newEngineer}`
    );
  },
};

// –í–µ–±—Ö—É–∫ –æ—Ç Remonline
app.post("/webhook", async (req, res) => {
  console.log("Raw webhook data:", JSON.stringify(req.body, null, 2));
  try {
    const data = req.body;
    console.log("üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Remonline:", data.event_name);

    const handler = eventHandlers[data.event_name];
    let message;

    if (handler) {
      message = await handler(data);
      
      // –ï—Å–ª–∏ handler –≤–µ—Ä–Ω—É–ª null (—Å—Ç–∞—Ç—É—Å –Ω–µ "–ê–≤—Ç–æ–∑–∞–ø–∏—Å") ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      if (message === null) {
        console.log("‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: —Å—Ç–∞—Ç—É—Å –Ω–µ '–ê–≤—Ç–æ–∑–∞–ø–∏—Å'");
        return res.status(200).send("OK (–Ω–µ –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å)");
      }
    } else {
      message = `üì¶ –°–æ–±—ã—Ç–∏–µ ${data.event_name}:\nID: ${data.id}`;
    }

    await sendTelegramMessageWithRetry(message);
    res.status(200).send("OK");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    res.status(200).send("Error handled");
  }
});

// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
app.get("/send-test", async (req, res) => {
  const statusId = req.query.status_id || 1642511;
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ê–≤—Ç–æ–∑–∞–ø–∏—Å"
    const testData = {
      event_name: "Order.Created",
      metadata: {
        status: { id: 1642511 }, // ID —Å—Ç–∞—Ç—É—Å–∞ "–ê–≤—Ç–æ–∑–∞–ø–∏—Å"
        order: { id: 999, name: "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑" },
        client: { fullname: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" },
        asset: { name: "Toyota Camry" },
        employee: { full_name: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ü–µ—Ç—Ä–æ–≤" }
      }
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const handler = eventHandlers["Order.Created"];
    const message = await handler(testData);

    if (!message) {
      return res.status(200).send("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –Ω–µ '–ê–≤—Ç–æ–∑–∞–ø–∏—Å'");
    }

    await sendTelegramMessageWithRetry(message);
    res.send("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + message);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    res.status(500).send("–û—à–∏–±–∫–∞: " + error.message);
  }
});

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(isoDate) {
  try {
    const date = new Date(isoDate);
    return date.toLocaleString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });
  } catch (e) {
    return isoDate; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–∑–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - API –∑–∞–ø—Ä–æ—Å)
async function getStatusName(statusId) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  if (statusNamesCache[statusId]) {
    return statusNamesCache[statusId];
  }

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API-–∑–∞–ø—Ä–æ—Å –∫ Remonline –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
  const statusNames = {
    1342663: "–ù–æ–≤—ã–π",
    1642511: "–í —Ä–∞–±–æ—Ç–µ",
    3456789: "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
    4567890: "–í—ã–¥–∞–Ω",
    5678901: "–û—Ç–º–µ–Ω–µ–Ω",
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
  statusNamesCache[statusId] = statusNames[statusId] || `ID: ${statusId}`;
  return statusNamesCache[statusId];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function sendTelegramMessageWithRetry(text, retries = 3, delay = 2000) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: TELEGRAM_CHAT_ID,
    text,
    parse_mode: "Markdown",
    disable_web_page_preview: true,
  };

  console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", {
    url,
    chat_id: TELEGRAM_CHAT_ID,
    textLength: text.length,
    botToken: TELEGRAM_TOKEN
      ? `${TELEGRAM_TOKEN.substring(0, 5)}...`
      : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
  });

  let lastError;

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await axios.post(url, payload, {
        headers: { "Content-Type": "application/json" },
        timeout: 10000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
      });

      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`);
      return response.data;
    } catch (error) {
      lastError = error;
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}):`,
        {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message,
        }
      );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API
      if (error.response?.status === 429) {
        // Too Many Requests - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        const retryAfter = error.response.data?.parameters?.retry_after || 5;
        console.log(`‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–µ–º ${retryAfter} —Å–µ–∫—É–Ω–¥`);
        await new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));
      } else if (error.response?.status === 400) {
        // –ü–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É
        if (error.response.data?.description?.includes("markdown")) {
          // –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º - –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
          console.log("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
          payload.parse_mode = "";
        }
      } else if (attempt < retries) {
        // –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫—É–Ω–¥...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        delay = delay * 1.5;
      }
    }
  }

  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
  throw new Error(
    `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫: ${lastError.message}`
  );
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});




