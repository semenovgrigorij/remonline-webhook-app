const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const crypto = require("crypto");
require("dotenv").config();

function secureCompare(a, b) {
  try {
    return crypto.timingSafeEqual(
      Buffer.from(a?.toString() || ""),
      Buffer.from(b?.toString() || "")
    );
  } catch {
    return false;
  }
}

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ .env)
const TELEGRAM_TOKEN =
  process.env.TELEGRAM_TOKEN ||
  "8026606898:AAEcpb8avNsTWe8ehwDVsAF-sKy3WiYKfwg";
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || "1316558920";
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || "VSBpuxhNp0LJ5hJwiN8FZ";

app.use(bodyParser.json());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get("/", (req, res) => {
  res.status(200).send("–í–µ–±—Ö—É–∫ –¥–ª—è Remonline —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
app.post("/webhook", async (req, res) => {
  try {
    const incomingSecret = req.headers["x-secret-key"];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if (!secureCompare(incomingSecret, WEBHOOK_SECRET)) {
      return res.status(403).send("Forbidden");
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    let message;
    switch (req.body.event_type) {
      case "order_created":
        message = `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: ${req.body.order_id}\n–ö–ª–∏–µ–Ω—Ç: ${req.body.client_name}`;
        break;
      case "order_status_changed":
        message = `üîÑ –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${req.body.order_id}\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${req.body.new_status}`;
        break;
      default:
        message = `‚ÑπÔ∏è –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${req.body.event_type}`;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    if (message) {
      console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
      await sendTelegramMessage(message);
    }

    res.status(200).send("OK");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:", error);
    res.status(500).send("Internal Server Error");
  }
});

app.get("/send-test", async (req, res) => {
  try {
    console.log("=== –¢–ï–°–¢–û–í–ê–Ø –û–¢–ü–†–ê–í–ö–ê ===");

    const testMessage = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ " + new Date().toISOString();
    const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;

    console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", {
      token: TELEGRAM_TOKEN,
      chatId: TELEGRAM_CHAT_ID,
      url: url,
    });

    const response = await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: testMessage,
      parse_mode: "Markdown",
    });

    console.log("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram:", response.data);
    res.send("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + testMessage);
  } catch (error) {
    console.error("–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", {
      message: error.message,
      response: error.response?.data,
      config: error.config,
    });
    res.status(500).send("–û—à–∏–±–∫–∞: " + error.message);
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(text) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const data = {
    chat_id: Number(TELEGRAM_CHAT_ID), // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —á–∏—Å–ª–æ
    text: text,
    parse_mode: "Markdown",
  };

  console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:", { url, data });

  try {
    const response = await axios.post(url, data, {
      headers: {
        "Content-Type": "application/json",
      },
      timeout: 5000,
    });
    console.log("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", response.data);
    return response.data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ Telegram API:", {
      status: error.response?.status,
      data: error.response?.data,
      message: error.message,
    });
    throw error;
  }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
