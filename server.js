const orderCache = new Map(); // –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const crypto = require("crypto");
require("dotenv").config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown
function escapeMarkdown(text) {
  if (!text) return text;
  return String(text).replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&');
}

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "8026606898:AAEcpb8avNsTWe8ehwDVsAF-sKy3WiYKfwg";
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || "1316558920";
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || "VSBpuxhNp0LJ5hwiN8FZ";
const AUTO_APPOINTMENT_STATUS_ID = 1642511; // ID —Å—Ç–∞—Ç—É—Å–∞ "–ê–≤—Ç–æ–∑–∞–∫–∞–∑" –≤ Remonline
const IN_PROGRESS_STATUS_ID = 1642512; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Å—Ç–∞—Ç—É—Å–∞ "–í —Ä–∞–±–æ—Ç–µ" –≤ Remonline

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è WordPress
const WP_SITE_URL = process.env.WP_SITE_URL || "https://–≤–∞—à-—Å–∞–π—Ç.com"; // –£–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
const WP_API_USERNAME = process.env.WP_API_USERNAME || "admin"; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WordPress —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ API
const WP_API_PASSWORD = process.env.WP_API_PASSWORD || "password"; // –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∏ x-www-form-urlencoded
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get("/", (req, res) => {
  res.status(200).send("‚úÖ –í–µ–±—Ö—É–∫ –¥–ª—è Remonline –∏ Amelia —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
const eventHandlers = {
  "Order.Created": async (data) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –∫–µ—à
    orderCache.set(data.metadata.order.id, {
      client: data.metadata.client,
      asset: data.metadata.asset
    });
    return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  },
  "Order.Status.Changed": async (data) => {
    const newStatusId = data.metadata.new.id;
    const oldStatusId = data.metadata.old.id;
    const orderId = data.metadata.order.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–µ—à–∞
    const cachedData = orderCache.get(orderId) || {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å —Å "–ê–≤—Ç–æ–∑–∞–∫–∞–∑" –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"
    if (oldStatusId === AUTO_APPOINTMENT_STATUS_ID && newStatusId === IN_PROGRESS_STATUS_ID) {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Amelia
        const ameliaResult = await updateAmeliaStatus(orderId);
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Amelia:`, ameliaResult);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        return `üîÑ *–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω —Å "–ê–≤—Ç–æ–∑–∞–∫–∞–∑" –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ" #${orderId}*\n` +
               `üìù –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: \`${data.metadata.order.name}\`\n` +
               `üë§ –ö–ª—ñ—î–Ω—Ç: ${cachedData.client?.fullname || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n` +
               `üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ: ${cachedData.asset?.brand?.trim() || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n` +
               `‚úÖ –°—Ç–∞—Ç—É—Å –≤ Amelia —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω`;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Amelia –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
        return `‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Amelia #${orderId}*\n` +
               `üìù –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: \`${data.metadata.order.name}\`\n` +
               `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    if (newStatusId === AUTO_APPOINTMENT_STATUS_ID) {
      return `üîÑ *–ê–≤—Ç–æ–∑–∞–ø–∏—Å —ñ–∑ —Å–∞–π—Ç—É #${orderId}*\n` +
             `üìù –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: \`${data.metadata.order.name}\`\n` +
             `üë§ –ö–ª—ñ—î–Ω—Ç: ${cachedData.client?.fullname || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n` +
             `üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ: ${cachedData.asset?.brand?.trim() || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}`;
    }
    
    return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  },
  "Order.Deleted": (data) => {
    return `üóëÔ∏è *–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${data.metadata.order.id}*\n` +
           `üìù –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: \`${data.metadata.order.name}\`\n` +
           `üë®‚Äçüíº –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫: ${data.employee?.full_name || "–ù–µ–≤—ñ–¥–æ–º–æ"}`;
  },
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Amelia —á–µ—Ä–µ–∑ WordPress REST API
 * @param {string|number} remonlineOrderId - ID –∑–∞–∫–∞–∑–∞ –≤ Remonline
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function updateAmeliaStatus(remonlineOrderId) {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ID –∑–∞–∫–∞–∑–∞ –≤ Amelia
    const ameliaAppointmentId = await getAmeliaAppointmentId(remonlineOrderId);
    
    if (!ameliaAppointmentId) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –≤ Amelia –¥–ª—è Remonline ID: ${remonlineOrderId}`);
    }
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Amelia
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WordPress API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const wpApiUrl = `${WP_SITE_URL}/wp-json/amelia/v1/appointments/${ameliaAppointmentId}/status`;
    
    // Base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Basic Auth
    const authToken = Buffer.from(`${WP_API_USERNAME}:${WP_API_PASSWORD}`).toString('base64');
    
    const response = await axios.post(wpApiUrl, {
      status: 'approved' // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ Amelia ('approved', 'pending', –∏ —Ç.–¥.)
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Basic ${authToken}`
      }
    });
    
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Amelia:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Amelia: ${error.message}`);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–∫–∞–∑–∞ –≤ Amelia –ø–æ ID –∑–∞–∫–∞–∑–∞ –≤ Remonline
 * @param {string|number} remonlineOrderId - ID –∑–∞–∫–∞–∑–∞ –≤ Remonline
 * @returns {Promise<string|number|null>} - ID –∑–∞–∫–∞–∑–∞ –≤ Amelia –∏–ª–∏ null
 */
async function getAmeliaAppointmentId(remonlineOrderId) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WordPress API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
    const wpApiUrl = `${WP_SITE_URL}/wp-json/amelia-remonline/v1/mapping/${remonlineOrderId}`;
    
    // Base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Basic Auth
    const authToken = Buffer.from(`${WP_API_USERNAME}:${WP_API_PASSWORD}`).toString('base64');
    
    const response = await axios.get(wpApiUrl, {
      headers: {
        'Authorization': `Basic ${authToken}`
      }
    });
    
    if (response.data && response.data.ameliaAppointmentId) {
      return response.data.ameliaAppointmentId;
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∑–∞–∫–∞–∑–∞ Amelia:', error);
    return null;
  }
}

// –í–µ–±—Ö—É–∫ –æ—Ç Remonline
app.post("/webhook", async (req, res) => {
  console.log("Raw webhook data:", JSON.stringify(req.body, null, 2));
  try {
    const data = req.body;
    console.log("üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Remonline:", data.event_name);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    const receivedSecret = req.headers['x-remonline-secret'] || '';
    if (WEBHOOK_SECRET && receivedSecret !== WEBHOOK_SECRET) {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á");
      return res.status(403).send("Unauthorized");
    }

    const handler = eventHandlers[data.event_name];
    let message = null;

    if (handler) {
      message = await handler(data);
      
      // –ï—Å–ª–∏ handler –≤–µ—Ä–Ω—É–ª null ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (message === null) {
        console.log("‚è© –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        return res.status(200).send("OK (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)");
      }
    } else {
      message = `üì¶ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ ${data.event_name}:\nID: ${data.id}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    if (message) {
      await sendTelegramMessageWithRetry(message);
    }
    
    res.status(200).send("OK");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    res.status(200).send("Error handled"); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã Remonline –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
  }
});

// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
app.get("/send-test", async (req, res) => {
  try {
    // –¢–µ—Å—Ç–æ–≤—ã–π ID –∑–∞–∫–∞–∑–∞
    const testRemonlineOrderId = req.query.order_id || 999;
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const testData = {
      event_name: "Order.Status.Changed",
      metadata: {
        old: { id: AUTO_APPOINTMENT_STATUS_ID, name: "–ê–≤—Ç–æ–∑–∞–∫–∞–∑" },
        new: { id: IN_PROGRESS_STATUS_ID, name: "–í —Ä–∞–±–æ—Ç–µ" },
        order: { id: testRemonlineOrderId, name: `–¢–µ—Å—Ç-${testRemonlineOrderId}` },
        client: { fullname: "–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤—ã–π" },
        asset: { brand: "Toyota Test" }
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const message = await eventHandlers["Order.Status.Changed"](testData);
    
    if (!message) {
      return res.status(200).send("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–Ω—É–ª null");
    }

    await sendTelegramMessageWithRetry(message);
    res.send("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: " + message);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:", error);
    res.status(500).send("–û—à–∏–±–∫–∞: " + error.message);
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Amelia
app.get("/test-amelia-integration", async (req, res) => {
  try {
    // const remonlineOrderId = req.query.order_id;
    const remonlineOrderId = 53033169;
    if (!remonlineOrderId) {
      return res.status(400).send("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä order_id");
    }
    
    const ameliaAppointmentId = await getAmeliaAppointmentId(remonlineOrderId);
    
    if (!ameliaAppointmentId) {
      return res.status(404).send(`–ó–∞–∫–∞–∑ Amelia –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Remonline ID: ${remonlineOrderId}`);
    }
    
    res.status(200).json({
      remonlineOrderId,
      ameliaAppointmentId,
      message: "–°–≤—è–∑—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞–π–¥–µ–Ω–∞"
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Amelia:", error);
    res.status(500).send("–û—à–∏–±–∫–∞: " + error.message);
  }
});

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(isoDate) {
  try {
    const date = new Date(isoDate);
    return date.toLocaleString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });
  } catch (e) {
    return isoDate; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function sendTelegramMessageWithRetry(text, retries = 3, delay = 2000) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: TELEGRAM_CHAT_ID,
    text,
    parse_mode: "Markdown",
    disable_web_page_preview: true,
  };

  let lastError;

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await axios.post(url, payload, {
        headers: { "Content-Type": "application/json" },
        timeout: 10000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
      });

      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`);
      return response.data;
    } catch (error) {
      lastError = error;
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}):`,
        {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message,
        }
      );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API
      if (error.response?.status === 429) {
        // Too Many Requests - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        const retryAfter = error.response.data?.parameters?.retry_after || 5;
        console.log(`‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–µ–º ${retryAfter} —Å–µ–∫—É–Ω–¥`);
        await new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));
      } else if (error.response?.status === 400) {
        // –ü–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É
        if (error.response.data?.description?.includes("markdown")) {
          // –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º - –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
          console.log("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
          payload.parse_mode = "";
        }
      } else if (attempt < retries) {
        // –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫—É–Ω–¥...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        delay = delay * 1.5;
      }
    }
  }

  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
  throw new Error(
    `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫: ${lastError.message}`
  );
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Remonline-Amelia –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
  console.log(`üîó –í–µ–±—Ö—É–∫ URL: http://localhost:${PORT}/webhook`);
});